# load the relevant libraries
x<-c("tidyverse","car", "nlme", "lme4", "ez", "dplyr", "ggplot2", "knitr","stringr","nortest","gridExtra","png","R.matlab","lmerTest","simpleboot")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# clear all
# load the relevant libraries
x<-c("tidyverse","car", "nlme", "lme4", "ez", "dplyr", "ggplot2", "knitr","stringr","nortest","gridExtra","png","R.matlab","lmerTest","simpleboot")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# clear all
rm(list=ls(all=TRUE))
# which dataset?
dataset2use = 'bigDots'; nSub = 80;
# dataset2use = 'CD'; nSub = 17;
filedir = str_c('E:/Monash/', dataset2use, '/data/population/')
figDir  = str_c(filedir, 'fig/R/' )
dir.create(figDir, showWarnings = TRUE)
# load useful functions ---------------------------------------------------
wddir   = str_c('C:/Jochem/repositories/2018_Monash/')
setwd(wddir)
source("summarySE.R")
# a few settings defined in Matlab, goes in the filename that will be loaded
CSD = 0
nChanAlpha = 3
# what is the number of bins etc?
nside           = 1;
nbin            = 5;
bintype         = 'equal';
# which sorting?
bin2use         = 'pupil_lp_baseline_regress_iti_side'
# bin2use         = 'pupil_bp_baseline_regress_iti_side'
# bin2use         = 'pupil_lp_RT_neg200_200_regress_bl_iti_side';
# bin2use         = 'pupil_bp_RT_neg200_200_regress_bl_iti_side';
# bin2use         = 'pretarget_alpha';
# bin2use         = 'pretarget_alpha_asym';
# bin2use         = 'N2i_amplitude_regress_iti_side'
# ------------------------------------------------------------------------
# look at data averaged for each participannt
# ------------------------------------------------------------------------
# load participant level data
filename = str_c('participant_level_side(',nside ,')_bin(', nbin, ')_', bin2use ,
'_equal_CSD(', CSD, ')_','chAlpha(', nChanAlpha, ')_final' )
data_p_level = read_csv(str_c(filedir, filename,'.csv'))
data_p_level$Subject <- factor(data_p_level$Subject)
data_p_level$Side <- factor(data_p_level$Side)
data_p_level$Bin <- factor(data_p_level$Bin,labels=c("1", "2", "3", "4", "5"))
#  ------------------------------------------------------------------------
## check number of trials in each condition
sum_trials <- summarySE(data_p_level, measurevar="nTrial", groupvars=c("Bin","Side"))
sum_trials <- data.frame(sum_trials)
tt <- ttheme_default(colhead=list(fg_params = list(parse=TRUE)))
tbl <- tableGrob(sum_trials, rows=NULL, theme=tt)
png(str_c(figDir,'nTrials', bin2use, '.png'))
grid.arrange(tbl)
dev.off()
#  ------------------------------------------------------------------------
data_p_level$Bin <- as.numeric(data_p_level$Bin) # for polynomial contrasts to be set
data_p_level <- within(data_p_level, polyBin <- poly(Bin,2)) # define orthogonal polynomial
# our model has a random intercept for each subject (repeated measrures analysis)
model.Intercept     <- lme4::lmer(RT ~ 1 +
(1|Subject),
data = data_p_level, na.action = na.omit, REML=FALSE) # baseline model to compare the effect of bin to.
model.bin       <- update(model.Intercept, .~. + polyBin[, 1]) # test linear polynomial
model.binQ      <- update(model.bin, .~. + polyBin[, 2])# test quadratic polynomial
# model.bin       <- update(model.Intercept, .~. + Bin) # test linear polynomial, not orthogonal!!
# model.binQ      <- update(model.bin, .~. + I(Bin^2))# test linear polynomial, not orthogonal!!
anova(model.Intercept, model.bin, model.binQ) #compare likelihood of models
library(broom)
summary(model.binQ)
kable(tidy(model.binQ),digits = 3)
library(MuMIn)
r.squaredGLMM(model.binQ)
# see https://jonlefcheck.net/2013/03/13/r2-for-linear-mixed-effects-models/ for an explanation of marginal and conditional R2
library(piecewiseSEM)
rsquared(list(model.Intercept,model.binQ))
#
# exclude some variables
all.dependent.variables <- data_p_level %>%
dplyr::select(-one_of("Subject"), -one_of("Side"), -one_of("Bin"), -one_of("polyBin"),
-one_of("nTrial"),
-one_of("pupil_bl_lp"), -one_of("pupil_bl_bp")) %>%
names()
fitlist_lme4 <- lapply(all.dependent.variables, function(i) {
eval(parse(text=
paste0('
model.baseline     <- lme4::lmer(', i, ' ~ (1|Subject), data = data_p_level, na.action = na.omit, REML=FALSE) # baseline model to compare the effect of bin to
model.bin          <- update(model.baseline, .~. + polyBin[, 1]) # test model with Bin, linear
model.binQ         <- update(model.bin, .~. + polyBin[, 2]) # test model with Bin, quadratic
stat <- anova(model.baseline, model.bin,model.binQ)
# model.bin <- as(model.bin,"merModLmerTest") # use the lmerTest package to obtain a p-value for the coefficients
trend <- coef(summary(model.binQ))
fit_Y_L <- predict(model.bin)
mat_fitL <- matrix(NA, nrow =1, ncol = (nSub*nbin))
mat_fitL[as.numeric(names(fit_Y_L))] <-  unname(fit_Y_L)
# mat_fitL <- matrix(mat_fitL, nrow = nSub, byrow = FALSE)
fit_Y_Q <- predict(model.binQ)
mat_fitQ <- matrix(NA, nrow =1, ncol = (nSub*nbin))
mat_fitQ[as.numeric(names(fit_Y_Q))] <-  unname(fit_Y_Q)
# mat_fitQ <- matrix(mat_fitQ, nrow = nSub, byrow = FALSE)
list(stat=stat, trend=trend, fitL=mat_fitL, fitQ=mat_fitQ)
')
))
})
fitlist_lme4
all.dependent.variables
fitlist_lme4[[19]]
fitlist_lme4[[19]]$stat
fitlist_lme4[[19]]$trend
