# analyse participant level data
# load the relevant libraries
x<-c("tidyverse","car", "nlme", "lme4", "ez", "dplyr", "ggplot2", "knitr","stringr","nortest","gridExtra","png","R.matlab","lmerTest","simpleboot")
lapply(x, function(x) {if (!require(x, character.only=T)) {install.packages(x);require(x)}})
# clear all
rm(list=ls(all=TRUE))
# which dataset?
dataset2use = 'bigDots'; nSub = 80;
# dataset2use = 'CD'; nSub = 17;
filedir = str_c('E:/Monash/', dataset2use, '/data/population/')
figDir  = str_c(filedir, 'fig/R/' )
dir.create(figDir, showWarnings = TRUE)
# load useful functions ---------------------------------------------------
wddir   = str_c('C:/Jochem/repositories/2019_pupil_decisionMaking/utilities/')
setwd(wddir)
source("summarySE.R")
source('two_lines_JvK.R')
# a few settings defined in Matlab, goes in the filename that will be loaded
scaleVariables = 1;
CSD = 0
nChanAlpha = 3
# what is the number of bins etc?
nside           = 1;
nbin            = 5;
bintype         = 'equal';
# pupil_filterSettings = c(0.05, 4)
pupil_filterSettings = c(0.01, 6)
# GLM settings
meanCenter = 0;
orthogonalPredictors = 0;
normalisePupil = 0;
GLM_bl = 800;
# which sorting?
### Baseline pupil diameter
bin2use = 'pupil_lp_baseline_regress_iti_side'
# # bin2use = 'pupil_lp_1Hz_baseline_regress_iti_side'
# bin2use = 'pupil_lp_baselineSlope_regress_iti_side'
# bin2use = 'pupil_lp_baselineDiff_regress_iti_side'
# bin2use = 'pupil_bp_baseline_regress_iti_side'
# bin2use = 'pupil_bp_baselinePhase_regress_iti_side'
# bin2use = 'pupil_bp_baselinePhase_regress_iti_side_fix'
#
# #
# # ### Pupil RT
# bin2use = 'pupil_bp_RT_neg200_200_regress_bl_iti_side'
# bin2use = 'pupil_bp_RT_neg200_200_regress_bl_iti_side_RT'
#
# # ### Pupil around max derivative of IRF
# # bin2use = 'pupil_bp_average_maxDiff_pupilIRF_neg200_200_regress_bl_iti_side';
# bin2use = 'pupil_bp_slope_maxDiff_pupilIRF_neg200_200_regress_bl_iti_side';
# bin2use = 'pupil_bp_diff_maxDiff_pupilIRF_200_200_regress_bl_iti_side';
# bin2use = 'pupil_bp_linearProjection_maxDiff_pupilIRF_neg200_200_regress_bl_iti_side';
# # #
# # # # ### GLM estimated Pupil
# bin2use = 'GLM_pupil_StimResp_stim_regress_bl_iti_side';
# bin2use = 'GLM_pupil_Ramp_stim_regress_iti_side';
# bin2use = 'GLM_pupil_Ramp_stim_regress_bl_iti_side';
# bin2use = 'GLM_pupil_Ramp_stim_regress_blPhase_iti_side';
# bin2use = 'GLM_pupil_Ramp_stim_regress_bl_blPhase_iti_side';
#
# bin2use = 'GLM_pupil_Ramp_sust_regress_bl_iti_side';
#
# bin2use = 'GLM_pupil_Ramp_stim_VIF5_regress_bl_iti_side';
#
# ### Other
# bin2use = 'pretarget_alpha';
# ------------------------------------------------------------------------
# look at data averaged for each participannt
# ------------------------------------------------------------------------
# # load participant level data
# load data ---------------------------------------------------------------
# load single trial level data
filename = str_c('allSub_singleTrial_pupil_0.01_6Hz')
# filename = str_c('allSub_singleTrial_CSD(0)_selChCPP(0_1)_selChAlpha(2_4)_', pupilBl, 'bl_', pupilPre_t, 'pre_t' )
data_st = read_csv(str_c(filedir, filename,'.csv'))
# only select correct trials
data_st <- data_st %>%
filter(allvalidtr_neg100_RT_200==1) %>%
filter(Outcome==1)
# make factors out of some variables
data_st$ID   <- factor(data_st$Subject)
data_st$Subject   <- factor(data_st$Subject)
data_st$StimLoc   <- factor(data_st$StimLoc)
data_st$ITI   <- factor(data_st$ITI)
# first we define orthogonal polynomials in order to test for different trends in the data
data_st <- within(data_st, polyPupilResp <- poly(pupilResp,2))
data_st <- within(data_st, polyPupilBL <- poly(pupilBaseline,2))
# our model has a random intercept for each subject (repeated measrures analysis), as well as for stimulus location and iti.
model.Intercept     <- lmerTest::lmer(RT ~ 1 +
(1|Subject) +
(1|StimLoc) +
(1|ITI) +
Trial +
blockTrial,
data = data_st, na.action = na.omit, REML=FALSE) # baseline model to compare the effect of bin to.
model.PupilBL       <- update(model.Intercept, .~. + polyPupilBL[, 1])
model.PupilBLQ      <- update(model.PupilBL, .~. + polyPupilBL[, 2])
model.PupilResp     <- update(model.PupilBLQ, .~. + polyPupilResp[, 1])
model.PupilRespQ    <- update(model.PupilResp, .~. + polyPupilResp[, 2])
statstable <- anova(model.Intercept, model.PupilBL, model.PupilBLQ, model.PupilResp,model.PupilRespQ) #compare likelihood of models
statstable
coef(summary(model.PupilRespQ))
as.data.frame(coef(summary(model.PupilRespQ)))
output1 <- as.data.frame(coef(summary(model.PupilBLQ)))[4:5, ]
output2 <- as.data.frame(coef(summary(model.PupilRespQ)))[6:7, ]
Output_mat <- rbind(
output1,
output2)
Output_mat
as.data.frame(coef(summary(model.PupilRespQ)))
# load data ---------------------------------------------------------------
# load single trial level data
filename = str_c('allSub_singleTrial_pupil_0.01_6Hz')
# filename = str_c('allSub_singleTrial_CSD(0)_selChCPP(0_1)_selChAlpha(2_4)_', pupilBl, 'bl_', pupilPre_t, 'pre_t' )
data_st = read_csv(str_c(filedir, filename,'.csv'))
# only select correct trials
data_st <- data_st %>%
filter(allvalidtr_neg100_RT_200==1) %>%
filter(Outcome==1)
# make factors out of some variables
data_st$ID   <- factor(data_st$Subject)
data_st$Subject   <- factor(data_st$Subject)
data_st$StimLoc   <- factor(data_st$StimLoc)
data_st$ITI   <- factor(data_st$ITI)
# first we define orthogonal polynomials in order to test for different trends in the data
data_st <- within(data_st, polyPupilResp <- poly(pupilResp,2))
data_st <- within(data_st, polyPupilBL <- poly(pupilBaseline,2))
# our model has a random intercept for each subject (repeated measrures analysis), as well as for stimulus location and iti.
model.Intercept     <- lmerTest::lmer(RT ~ 1 +
(1|Subject) +
(1|StimLoc) +
(1|ITI) +
Trial +
blockTrial,
data = data_st, na.action = na.omit, REML=FALSE) # baseline model to compare the effect of bin to.
model.PupilBL       <- update(model.Intercept, .~. + polyPupilBL[, 1])
model.PupilBLQ      <- update(model.PupilBL, .~. + polyPupilBL[, 2])
model.PupilResp     <- update(model.PupilBLQ, .~. + polyPupilResp[, 1])
model.PupilRespQ    <- update(model.PupilResp, .~. + polyPupilResp[, 2])
statstable <- anova(model.Intercept, model.PupilBL, model.PupilBLQ, model.PupilResp,model.PupilRespQ) #compare likelihood of models
statstable
as.data.frame(coef(summary(model.PupilRespQ)))
# load data ---------------------------------------------------------------
# load single trial level data
filename = str_c('allSub_singleTrial_pupil_0.01_6Hz')
# filename = str_c('allSub_singleTrial_CSD(0)_selChCPP(0_1)_selChAlpha(2_4)_', pupilBl, 'bl_', pupilPre_t, 'pre_t' )
data_st = read_csv(str_c(filedir, filename,'.csv'))
# only select correct trials
data_st <- data_st %>%
filter(allvalidtr_neg100_RT_200==1) %>%
filter(Outcome==1)
# make factors out of some variables
data_st$ID   <- factor(data_st$Subject)
data_st$Subject   <- factor(data_st$Subject)
data_st$StimLoc   <- factor(data_st$StimLoc)
data_st$ITI   <- factor(data_st$ITI)
# first we define orthogonal polynomials in order to test for different trends in the data
data_st <- within(data_st, polyPupilResp <- poly(pupilResp,2))
data_st <- within(data_st, polyPupilBL <- poly(pupilBaseline,2))
# our model has a random intercept for each subject (repeated measrures analysis), as well as for stimulus location and iti.
model.Intercept     <- lmerTest::lmer(RT ~ 1 +
(1|Subject) +
(1|StimLoc) +
(1|ITI) +
Trial +
blockTrial,
data = data_st, na.action = na.omit, REML=FALSE) # baseline model to compare the effect of bin to.
model.PupilBL       <- update(model.Intercept, .~. + polyPupilBL[, 1])
model.PupilBLQ      <- update(model.PupilBL, .~. + polyPupilBL[, 2])
model.PupilResp     <- update(model.PupilBLQ, .~. + polyPupilResp[, 1])
model.PupilRespQ    <- update(model.PupilResp, .~. + polyPupilResp[, 2])
statstable <- anova(model.Intercept, model.PupilBL, model.PupilBLQ, model.PupilResp,model.PupilRespQ) #compare likelihood of models
as.data.frame(coef(summary(model.PupilRespQ)))
# load data ---------------------------------------------------------------
# load single trial level data
filename = str_c('allSub_singleTrial_pupil_0.01_6Hz')
# filename = str_c('allSub_singleTrial_CSD(0)_selChCPP(0_1)_selChAlpha(2_4)_', pupilBl, 'bl_', pupilPre_t, 'pre_t' )
data_st = read_csv(str_c(filedir, filename,'.csv'))
# only select correct trials
data_st <- data_st %>%
filter(allvalidtr_neg100_RT_200==1) %>%
filter(Outcome==1)
# make factors out of some variables
data_st$ID   <- factor(data_st$Subject)
data_st$Subject   <- factor(data_st$Subject)
data_st$StimLoc   <- factor(data_st$StimLoc)
data_st$ITI   <- factor(data_st$ITI)
# first we define orthogonal polynomials in order to test for different trends in the data
data_st <- within(data_st, polyPupilResp <- poly(pupilResp,2))
data_st <- within(data_st, polyPupilBL <- poly(pupilBaseline,2))
# our model has a random intercept for each subject (repeated measrures analysis), as well as for stimulus location and iti.
model.Intercept     <- lmerTest::lmer(RT ~ 1 +
(1|Subject) +
(1|StimLoc) +
(1|ITI) +
Trial +
blockTrial,
data = data_st, na.action = na.omit, REML=FALSE) # baseline model to compare the effect of bin to.
model.PupilBL       <- update(model.Intercept, .~. + polyPupilBL[, 1])
model.PupilBLQ      <- update(model.PupilBL, .~. + polyPupilBL[, 2])
model.PupilResp     <- update(model.PupilBLQ, .~. + polyPupilResp[, 1])
model.PupilRespQ    <- update(model.PupilResp, .~. + polyPupilResp[, 2])
statstable <- anova(model.Intercept, model.PupilBL, model.PupilBLQ, model.PupilResp,model.PupilRespQ) #compare likelihood of models
statstable
# output1 <- as.data.frame(coef(summary(model.PupilBLQ)))[4:5, ]
Output_mat <- as.data.frame(coef(summary(model.PupilRespQ)))[4:7, ]
Output_mat
Output_mat <- cbind(
statstable$Chisq[2:5],
statstable$`Pr(>Chisq)`[2:5],
Output_mat
)
Output_mat
colnames_output <- colnames(Output_mat)
colnames_output[1] <- 'X'
colnames_output[2] <- 'Xp'
colnames_output[3] <- 'B'
colnames_output[4] <- 'se'
colnames_output[6] <- 't'
colnames_output[7] <- 'p'
colnames(Output_mat) <- colnames_output
rownames_output = rownames(Output_mat)
rownames_output[1] <- 'BPD'
rownames_output[2] <- 'BPD2'
rownames_output[3] <- 'PR'
rownames_output[4] <- 'PR2'
Output_mat <- cbind(rownames_output, Output_mat)
Output_mat
Output_mat <- as.data.frame(coef(summary(model.PupilRespQ)))[4:7, ]
Output_mat <- cbind(
statstable$Chisq[2:5],
statstable$`Pr(>Chisq)`[2:5],
Output_mat
)
colnames_output <- colnames(Output_mat)
colnames_output[1] <- 'X'
colnames_output[2] <- 'Xp'
colnames_output[3] <- 'B'
colnames_output[4] <- 'se'
colnames_output[6] <- 't'
colnames_output[7] <- 'p'
colnames(Output_mat) <- colnames_output
rownames_output = rownames(Output_mat)
rownames_output[1] <- 'BPD'
rownames_output[2] <- 'BPD2'
rownames_output[3] <- 'PR'
rownames_output[4] <- 'PR2'
Output_mat <- cbind(rownames_output, Output_mat)
Output_mat$X <- as.character(Output_mat$X)
Output_mat$Xp <- as.character(Output_mat$Xp)
Output_mat$B <- as.character(Output_mat$B)
Output_mat$se <- as.character(Output_mat$se)
Output_mat$df <- as.character(Output_mat$df)
Output_mat$t <- as.character(Output_mat$t)
Output_mat$p <- as.character(Output_mat$p)
write.csv(Output_mat, str_c(filedir, filename, '_R_statistics','.csv'),row.names = FALSE, na="")
# our model has a random intercept for each subject (repeated measrures analysis), as well as for stimulus location and iti.
model.Intercept     <- lmerTest::lmer(RT ~ 1 +
(1|Subject) +
(1|StimLoc) +
(1|ITI) +
Trial +
blockTrial,
data = data_st, na.action = na.omit, REML=FALSE) # baseline model to compare the effect of bin to.
model.PupilBL       <- update(model.Intercept, .~. + polyPupilBL[, 1])
model.PupilBLQ      <- update(model.PupilBL, .~. + polyPupilBL[, 2])
model.PupilResp     <- update(model.PupilBLQ, .~. + polyPupilResp[, 1])
model.PupilRespQ    <- update(model.PupilResp, .~. + polyPupilResp[, 2])
statstable <- anova(model.Intercept, model.PupilBL, model.PupilBLQ, model.PupilResp,model.PupilRespQ) #compare likelihood of models
Output_mat <- as.data.frame(coef(summary(model.PupilRespQ)))[4:7, ]
Output_mat <- cbind(
statstable$Chisq[2:5],
statstable$`Pr(>Chisq)`[2:5],
Output_mat
)
colnames_output <- colnames(Output_mat)
colnames_output[1] <- 'X'
colnames_output[2] <- 'Xp'
colnames_output[3] <- 'B'
colnames_output[4] <- 'se'
colnames_output[6] <- 't'
colnames_output[7] <- 'p'
colnames(Output_mat) <- colnames_output
rownames_output = rownames(Output_mat)
rownames_output[1] <- 'BPD'
rownames_output[2] <- 'BPD2'
rownames_output[3] <- 'PR'
rownames_output[4] <- 'PR2'
Output_mat <- cbind(rownames_output, Output_mat)
Output_mat$X <- as.character(Output_mat$X)
Output_mat$Xp <- as.character(Output_mat$Xp)
Output_mat$B <- as.character(Output_mat$B)
Output_mat$se <- as.character(Output_mat$se)
Output_mat$df <- as.character(Output_mat$df)
Output_mat$t <- as.character(Output_mat$t)
Output_mat$p <- as.character(Output_mat$p)
write.csv(Output_mat, str_c(filedir, filename, '_R_statistics','.csv'),row.names = FALSE, na="")
